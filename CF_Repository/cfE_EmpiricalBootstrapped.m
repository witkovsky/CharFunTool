function cf = cfE_EmpiricalBootstrapped(t,data,randID,cfX)
%% cfE_EmpiricalBootstrapped
%  Characteristic function of the EMPIRICAL BOOTSTRAPPED distribution,
%  based on the bootstrapped data, dataBoot = data(randID), where randID is
%  a vector of pseudorandom integers between 1 and length(data). 
%
%  That is, cf(t) = (1/N)*(cfD(dataBoot_1*t) +...+ cfD(dataBoot_N*t)),
%  where cfD(t) represents the characteristic function of the DIRAC RV
%  concentrated at the constant d=1, i.e. cfD(t) = exp(1i*t). 
%
%  cfE_EmpiricalBootstrapped(t,data,randID,cfX) evaluates the compound
%  characteristic function 
%   cf(t) = cfE_EmpiricalBootstrapped(-1i*log(cfX(t)),data,randID)
%         = (1/N) * sum_{j=1}^N cfX(t)^dataBoot_j;
% where cfX is function handle of the characteristic function cfX(t) of the
% random variable X.   
%
% SYNTAX
%  cf = cfE_EmpiricalBootstrapped(t,data)
%  cf = cfE_EmpiricalBootstrapped(t,data,randID)
%  cf = cfE_EmpiricalBootstrapped(t,data,randID,cfX)
%
% INPUTS:
%  t      - vector or array of real values, where the CF is evaluated.
%  data   - vector of original data. If empty, default value is data = 1. 
%  randID - vector of pseudorandom integers between 1 and lemngth(data). If
%           empty, randID is randomly generated by randID =
%           randi(length(data),size(data)). 
%  cfX    - function handle of the characteristic function of a random
%           variable X. If cfX is non-empty, a compound CF is evaluated as
%           cf(t) = cf(-1i*log(cfX(t)),data).
%
% WIKIPEDIA: 
%  https://en.wikipedia.org/wiki/Empirical_distribution_function.
%  https://en.wikipedia.org/wiki/Bootstrapping_(statistics)
%
% EXAMPLE 1 (Bootstrapped empirical CF based on given data)
%  rng(101);
%  n = 1000;
%  data = [normrnd(5,0.2,3*n,1); trnd(3,n,1); chi2rnd(1,n,1)];
%  dataN = length(data);
%  randID = randi(dataN,dataN,1);
%  t = linspace(-50,50,2^10);
%  cf = cfE_EmpiricalBootstrapped(t,data,randID);
%  figure; plot(t,real(cf),t,imag(cf)),grid
%  title('Bootstrapped empirical CF')
%
% EXAMPLE 2 (PDF/CDF of the compound bootstrapped empirical distributions)
%  rng(101);
%  lambda = 25; nN = 10; Ndata = poissrnd(lambda,1,nN);
%  mu = 0.1; sigma = 2; nX = 1500; Xdata = lognrnd(mu,sigma,1,nX);
%  randID = [];
%  cfX = @(t) cfE_EmpiricalBootstrapped(t,Xdata,randID);
%  cf  = @(t) cfE_EmpiricalBootstrapped(t,Ndata,randID,cfX);
%  t   = linspace(-0.2,0.2,2^10);
%  figure; plot(t,real(cf(t)),t,imag(cf(t))),grid
%  title('Compound Bootstrapped Empirical CF')
%  x = linspace(0,1000,501);
%  prob = [0.9 0.95];
%  clear options
%  options.N = 2^12;
%  options.xMin = 0;
%  options.SixSigmaRule = 10;
%  result = cf2DistGP(cf,x,prob,options)
%
% EXAMPLE 3 (PDF/CDF of the Stress-Strength reliability R = Pr(X<Y))
%  rng(101);
%  mu = 0; sigma = 1; n = 50; X = lognrnd(mu,sigma,n,1);
%  mu = 2; sigma = 2; n = 20; Y = lognrnd(mu,sigma,n,1);
%  nBoot = 1000;
%  xCrit = 0;
%  R     = zeros(nBoot,1);
%  for i = 1:nBoot
%      cfX = @(t) cfE_EmpiricalBootstrapped(t,X);
%      cfY = @(t) cfE_EmpiricalBootstrapped(t,Y);
%      cf  = @(t) cfX(t) .* cfY(-t);
%      [~,R(i)] = cf2DistGP(cf,xCrit);
%  end
%  bandwidth = 0.02;
%  cf_KERNEL = @(t) exp(-(bandwidth*t).^2/2);
%  cfR = @(t) cfE_Empirical(t,R) .* cf_KERNEL(t);
%  x = linspace(0,1);
%  prob = [0.025 0.5 0.95 0.975];
%  clear options
%  options.xMin = 0;
%  options.xMax = 1;
%  options.SixSigmaRule = 10;
%  result = cf2DistGP(cfR,x,prob,options)
%  
% REFERENCES:
%  WITKOVSKY V., WIMMER G., DUBY T. (2017). Computing the aggregate
%  loss distribution based on numerical inversion of the compound empirical
%  characteristic function of frequency and severity. arXiv preprint
%  arXiv:1701.08299.   

% (c) Viktor Witkovsky (witkovsky@gmail.com)
% Ver.: 15-Sep-2018 11:47:29
%% ALGORITHM
%cf = cfE_EmpiricalBootstrapped(t,data,randID,cfX)

%% CHECK THE INPUT PARAMETERS
narginchk(1, 4);
if nargin < 2, data = []; end
if nargin < 3, randID = []; end
if nargin < 4, cfX = []; end

%%
if isempty(data)
    data = 1;
end

szd   = size(data);
data  = data(:);
dataN = length(data);

if isempty(randID)
    randID = randi(dataN,dataN,1);
end

data = data(randID);
data = reshape(data,szd);

weights = [];
cf = cfE_DiracMixture(t,data,weights,cfX);

end